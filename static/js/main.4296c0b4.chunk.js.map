{"version":3,"sources":["logo.svg","components/card/card.component.jsx","components/cardList/cardList.component.jsx","components/searchBox/searchBox.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","key","SearchBox","placeholder","changeHandler","type","onChange","MonstersApp","e","setState","searchValue","target","value","state","fetch","then","response","json","users","this","filtereredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8KAAAA,EAAOC,QAAU,IAA0B,kC,2LCG9BC,G,wBAAO,SAACC,GAAD,OACZ,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,UACLC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACH,4BAAKL,EAAMI,QAAQE,MACnB,2BAAIN,EAAMI,QAAQG,UCJrBC,EAAW,SAAAR,GACpB,OACI,yBAAKC,UAAU,aAEXD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAC1B,kBAAC,EAAD,CAAMO,IAAKP,EAAQC,GAAID,QAASA,SCN/BQ,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,cAAf,OACrB,2BAAQb,UAAU,SACVc,KAAK,SACLF,YAAaA,EACbG,SAAYF,MCyCTG,E,YAxCb,aAAe,IAAD,8BACZ,+CAkBFH,cAAgB,SAACI,GACf,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAlBrC,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IAJH,E,iFAQM,IAAD,OACjBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKT,SAAS,CAACV,SAAUmB,S,+BAWrB,IAAD,EACyBC,KAAKN,MAA9Bd,EADA,EACAA,SAAUW,EADV,EACUA,YACbU,EAAqBrB,EAASsB,QAAO,SAAA3B,GACvC,OAAOA,EAAQE,KAAK0B,cAAcC,SAASb,EAAYY,kBAEzD,OACE,yBAAK/B,UAAU,eACf,gDACA,kBAAC,EAAD,CACMY,YAAY,YACZC,cAAee,KAAKf,gBAC1B,kBAAC,EAAD,CAAUL,SAAUqB,S,GAnCAI,aCKNC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.4296c0b4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './card.styles.css';\n\nexport const Card = (props) => (\n        <div className=\"card-container\">\n            <img alt=\"monster\"\n                src={`https://robohash.org/${props.monster.id}?set=set1&size=180x180`} />\n                <h2>{props.monster.name}</h2>\n                <p>{props.monster.email}</p>\n        </div>\n    )","import React from 'react';\nimport './cardList.styles.css';\nimport { Card } from '../card/card.component'\n\nexport const CardList = props => {\n    return (\n        <div className='card-list'>\n        {\n            props.monsters.map(monster => (\n            <Card key={monster.id} monster={monster} />))\n        }\n        </div>\n    )}","import React from 'react';\nimport './searchBox.styles.css';\n\nexport const SearchBox = ({placeholder, changeHandler}) => (\n    <input  className=\"search\"\n            type='search'\n            placeholder={placeholder}\n            onChange = {changeHandler}/>\n      \n);\n","import React, {Component} from 'react';\n// eslint-disable-next-line no-unused-vars\nimport logo from './logo.svg';\nimport './App.css';\nimport { CardList } from './components/cardList/cardList.component'\nimport { SearchBox } from './components/searchBox/searchBox.component'\n\nclass MonstersApp extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchValue: ''\n    }\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => {\n        this.setState({monsters: users})\n      });\n  }\n  \n  /**\n   * @function changeHandler sets the searchValue state with the search string\n   */\n  changeHandler = (e) => {\n    this.setState({searchValue: e.target.value});\n  }\n \n  render() {\n    const {monsters, searchValue }= this.state;\n    let filtereredMonsters = monsters.filter(monster => {\n      return monster.name.toLowerCase().includes(searchValue.toLowerCase());\n    })\n    return (\n      <div className=\"MonstersApp\">\n      <h1>Monsters Gallery</h1>\n      <SearchBox\n            placeholder='E.g. Glen'\n            changeHandler={this.changeHandler}></SearchBox>\n      <CardList monsters={filtereredMonsters}/>\n      </div>\n    );\n  }\n}\n\nexport default MonstersApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// eslint-disable-next-line no-unused-vars\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}